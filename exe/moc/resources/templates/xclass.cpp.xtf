/* {{ xclass.name }}'s internal stuff */

{% block xclass_content %}
{{ xclass.name }}StaticClass::{{ xclass.name }}StaticClass():
        BaseStaticClass("{{ xclass.name }}")
{   // properties{% for prop in xclass.properties %}
    _properties.emplace("{{ prop.name }}", XMetaProperty<{{ prop.raw_args }}>("{{ prop.name }}"));{% endfor %}
    // functions{% for function in xclass.functions %}
    _functions.emplace_back(MetaFunction<{{function.raw_args}}>{"{{ function.name }}"});{% endfor %}
    // invokables{% for invokable in xclass.invokables %}
    _functions.emplace_back(MetaFunction<{{ invokable.return_type }}({{ invokable.args_types }})>{"{{ invokable.name }}"});{% endfor %}
    // events{% for event in xclass.events %}
    _events.emplace_back(MetaFunction<void({{ event.raw_args }})>{"{{ event.name }}"});{% endfor %}
    {% for key, value in xclass.metadata %}
    _metadata["{{ key }}"] = R"({{ value }})"_xjson;{% endfor %}
}

{{ xclass.name }}StaticClass::~{{ xclass.name }}StaticClass() {
}

XObjectBase::ptr {{ xclass.name }}StaticClass::Create() const
{
    auto instance = Make<{{ xclass.name }}>();
    weak_ptr<{{ xclass.name }}> weak_instance = instance;
    // properties{% for prop in xclass.properties %}
    objectMetadata(instance.get()).properties.emplace("{{ prop.name }}", instance->{{ prop.name }});{% endfor %}
    {% for prop in xclass.properties %}{% if prop.autowire %}instance->{{ prop.name }} = {{ prop.autowire.pool.name }}Pool["{{ prop.autowire.name }}"]->cast<{{ prop.autowire.name }}>();{% endif %}{% endfor %}
    // functions{% for function in xclass.functions %}
    if (!instance->{{ function.name }}) {
        throw XException("uninitialized function '{{ function.name }}' in class '{{ xclass.name }}'");
    }
    objectMetadata(instance.get()).functions.emplace("{{ function.name }}", instance->{{ function.name }});
    {% endfor %}
    // invokables{% for invokable in xclass.invokables %}
    objectMetadata(instance.get()).functions
        .emplace("{{ invokable.name }}", function<{{ invokable.return_type }}({{ invokable.args_types }})>([instance]({{ invokable.args_decl }}) {
                   {% if invokable.return_type != "void" %}return {% endif %}instance->{{ invokable.name }}({{ invokable.args_names }});
                }));{% endfor %}

    // events{% for event in xclass.events %}
    objectMetadata(instance.get()).events.emplace("{{ event.name }}", instance->{{ event.name }});
    {% endfor %}
    instance->initialize();
    return instance;
}

{{ xclass.name }}StaticClass::ptr {{ xclass.name }}StaticClass::_instance = []() {
    shared_ptr<{{ xclass.name }}StaticClass> instance(new {{ xclass.name }}StaticClass(), [](auto* pointer){
        XClass::UnRegister(pointer);
        delete pointer;
    });
    instance->_init();
    XClass::Register(instance, &{{ xclass.name }}::CreateObject);
    return instance;
}();

template<>
{{ xclass.name }}::BaseStaticClass& {{ xclass.base }}<{{ xclass.name }}>::_XStaticClass = *{{ xclass.name }}StaticClass::_instance;
{% endblock %}
